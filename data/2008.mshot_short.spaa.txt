We propose a hardware-assisted memory snapshot to improve software concurrency. It is built on top of the hardware resources for transactional memory and allows for easy development of system software modules such as concurrent garbage collector and dynamic profiler. *$Chip-multiprocessors (CMPs) bring abundant parallelism to com- modity systems. However, the lack of concurrency in applications prevents us from fully exploiting the additional hardware cores. To alleviate this problem, it is important to develop architectural tools that help programmers to exploit parallelism. In search of such tools, we found that memory snapshot is particularly useful for im- proving the concurrency of software systems [2]. The basic concept of snapshots has been used widely in databases, file systems and reliable storage. A snapshot is an image of a large dataset at a particular moment in time and provides a consistent view of the constantly mutating dataset for later use. While several algorithms for memory snapshot have been proposed, their usefulness for performance optimizations is limited because they rely on software techniques.  view on the object reference graph at recent time. Using MShot, the memory profiler can save a recent image of the object reference graph fast and atomically and safely analyze the graph in parallel with the application threads working on the up-to-date image of the graph. There is no additional coding and time wasted on synchronization between the application and profiler threads. With MShot, it is easy for unskilled programmers to understand the concept of memory snapshot and use it to improve software concurrency eas- ily. The potential applications include, but not limited to, fast concurrent backup, checkpointing, debugging parallel programs, concurrent garbage collection, dynamic profilers, fast copy-on-write, and in-memory databases. To support low-overhead snapshots, MShot uses hardware to build the snapshot image gradually. Our key observation to reduce the hardware cost is that the hardware components for MShot are found in other architectural proposals such as transactional memory systems (TM) [1]. TM is a promising technology that uses hardware to support atomic execution without the need for man- ual synchronization in user code. The hardware cost of MShot is dramatically reduced by sharing hardware resources for data ver- sioning in TM. We prototyped three interesting modules: garbage collection (GC), dynamic profiling, and copy-on-write. Taking advantage of the fact that “once garbage, always garbage,” the snapshot-based GC takes a memory snapshot and performs collection without any interfer- ence with the application (mutator) threads running in parallel. The snapshot-based profiler takes a snapshot of the stack for call-path profiling or of the whole memory for memory profiling, while the application makes further calls or memory updates. Copy-on-write is widely used for efficient data sharing but incurs significant overhead when the shared data need to be copied. Snapshot-on-write takes a snapshot of data to be copied and executes the copy oper- ation as a background job on another core. The main benefit from using MShot in these applications is that it allowed us to use additional cores in the CMP to hide the overhead of these modules without complex code that manages their interactions with the main application.     *$ 